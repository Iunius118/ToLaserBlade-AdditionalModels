plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    // Tell FG to not automtically create the reobf tasks, as we now use Official mappings at runtime, If you don't use them at dev time then you'll have to fix your reobf yourself.
    reobf = false

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', 'tlbexmodels'
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'tlbexmodels'
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'tlbexmodels'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'tlbexmodels', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transitive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    // ToLaserBlade from ./libs
    implementation fg.deobf("com.github.iunius118.tolaserblade:ToLaserBlade-forge:${project.tolaserblade_version}")
}

processResources {
    // Replace ${MOD_VERSION} to mod version for fabric.mod.json
    filesMatching("**/fabric.mod.json") {
        expand MOD_VERSION: project.mod_version
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "tlbexmodels",
            "Specification-Vendor": "Iunius118",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor": "Iunisu118"
        ])
    }

    from("LICENSE", "CHANGELOG.txt", "CHEATSHEET.txt", "CREDITS.txt")

    // Exclude Java codes
    exclude('**/*.class')
    includeEmptyDirs(false)

    // Replace "javafml" to "lowcodefml" in Forge mods.toml to avoid loading mod class
    filesMatching('**/mods.toml') {
        filter { line ->
            line.replaceFirst(/javafml/,"lowcodefml")
        }
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    // Use the UTF-8 charset for Java compilation
    options.encoding = 'UTF-8'
}

eclipse {
    // Run everytime eclipse builds the code
    //autoBuildTasks genEclipseRuns
    // Run when importing the project
    synchronizationTasks 'genEclipseRuns'
}

// Merge the resources and classes into the same directory. 
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
